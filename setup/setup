#!/usr/bin/env bash

set -e

VERSION="0.2.4"

error() {
  echo "$@" >&2
  exit 2
}

# make sure this is arch linux
# shellcheck disable=SC1091
[ -f /etc/arch-release ] || error this script only works on Arch Linux

# make sure a valid domain name was provided (this isn't perfect validation, but it's good enough to check that it's not
# just garbage)
echo "$1" | grep -xEq '([0-9A-Za-z\-]+\.)+[0-9A-Za-z]+' || error you must provide a valid domain name as the first command-line argument

whoami | grep -xFq root || error you must run this script as root

# check for apparmor kernel parameter TODO
# [ -e /sys/kernel/security/apparmor/profiles ] || error you must enable apparmor in the kernel - see 'https://wiki.archlinux.org/index.php/AppArmor'

# install dependencies
# - certbot: generate SSL certificates for nginx
# - cronie: automate renewal of certbot certificates, cache cleaning, etc.
# - nginx: web server
# - sed: configuration editing on installation
# - python: helper scripts during installation
# - skopeo: for docker image extraction
[ -z "$ATO_NO_DEPS" ] && pacman -Syu --noconfirm --needed \
  certbot \
  cronie \
  nginx \
  sed \
  python \
  skopeo

curl -sSL "https://github.com/attempt-this-online/containers-storage/releases/download/v1.53.0-2/containers-storage.linux.amd64" \
  -o /usr/local/bin/containers-storage

chmod 755 /usr/local/bin/containers-storage

# don't use /tmp because it has weird permissions
mkdir -p /var/cache/ATO

if [ "$ATO_MANUAL_PACKAGE" ]; then
  tar -xf "$ATO_MANUAL_PACKAGE" -C /var/cache/ATO
else
  curl -sSL "https://github.com/attempt-this-online/attempt-this-online/releases/download/v$VERSION/attempt_this_online.tar.gz" |
    tar -xz -C /var/cache/ATO
fi

cd /var/cache/ATO/attempt_this_online

mkdir -p \
  /usr/local/lib/ATO \
  /usr/local/share/ATO

# configure ATO user
useradd -rs /usr/bin/nologin -md /var/lib/ATO_home ato

# install backend
install -m 500 -o ato -g ato server /usr/local/lib/ATO/

# install runners
cp -RT runners /usr/local/share/ATO/runners
chown -R ato:ato /usr/local/share/ATO/runners
chmod -R a+rX-w /usr/local/share/ATO/runners

# setup apparmor TODO
# systemctl enable --now apparmor.service

# install static files
cp -RT public /usr/local/share/ATO/public
for format in woff woff2 ttf; do
  curl -sSL "https://raw.githubusercontent.com/tonsky/FiraCode/5.2/distr/$format/FiraCode-Regular.$format" -o "/usr/local/share/ATO/public/FiraCode-Regular.$format"
done
for format in woff woff2 otf; do
  for variant in Bold Regular; do
    curl -sSL "https://github.com/pxeger/Cantarell/raw/v0.301-2/Cantarell$variant.$format" -o "/usr/local/share/ATO/public/Cantarell-$variant.$format"
  done
done
chown -R http:http /usr/local/share/ATO/public
chmod -R a+rX-w /usr/local/share/ATO/public

# configure nginx
sed -i "s/ato.pxeger.com/$1/g" setup/nginx.conf
install -m 644 -o root -g root setup/nginx.conf /etc/nginx/
# don't waste time generating DH params unless necessary
[ -f /etc/nginx/dhparam.pem ] || openssl dhparam -out /etc/nginx/dhparam.pem 2048
systemctl enable nginx.service

# configure Let's Encrypt
install -dm 750 -o root -g http /var/www/_letsencrypt
# we can't start nginx because the certificate isn't there, but we can't obtain a certificate if nginx isn't running
# so start a temporary Python web server
# TODO get option for email
certbot certonly -n --standalone -d "$1" -d "www.$1" --agree-tos --register-unsafely-without-email
# configure cronie to automatically renew certificates
# (every day at 10:07)
echo "7 10 * * * systemctl stop nginx && certbot renew && systemctl start nginx" >>/var/spool/cron/root
systemctl enable --now cronie.service

# install yargs
install -m 555 -o root -g root yargs /usr/local/lib/ATO/yargs

# steal a statically linked bash from Debian
curl -L "https://github.com/attempt-this-online/static-bash/releases/download/5.2.0(1)-rc2/bash" >/usr/local/lib/ATO/bash
chmod 555 /usr/local/lib/ATO/bash

# configure service
install -m 555 -o root -g root setup/ATO /usr/local/bin/
mkdir -p /usr/local/lib/systemd/system/
install -m 644 -o root -g root setup/ATO.service /usr/local/lib/systemd/system/
systemctl enable ATO.service

# generate flags to be used as proof of compromise
flag() {
  # shellcheck disable=SC2018
  tr </dev/urandom -dc a-z | head -c 32 >"$1"
  chown "$2" "$1"
  chmod 400 "$1"
}
flag /root/flag root:root
flag /var/lib/ATO_home/flag ato:ato

# Create upper layer filesystem for overlayfs which contains the mount point /ATO pre-made
mkdir -p /usr/local/share/ATO/overlayfs_upper/ATO /usr/local/share/ATO/overlayfs_upper/proc /usr/local/share/ATO/overlayfs_upper/dev

echo Finished system setup.
echo Now extracting Docker images - this will take a long time...

mkdir -p /usr/local/lib/ATO/env /usr/local/lib/ATO/containers /usr/local/lib/ATO/rootfs
chown -R ato:ato /usr/local/lib/ATO

STORAGE_BACKEND='containers-storage:[/usr/local/lib/ATO/containers+/run/ATO/containers]'

[ -z "$ATO_NO_IMAGES" ] &&
  while read -r image; do
    # ignore blank lines or comments
    [ -z "$image" ] || [ "$image" = "#" ] && continue
    echo "$image"

    # download image from Docker registry
    skopeo copy docker://"$image" "$STORAGE_BACKEND$image"

    # replace / so the image name is safe in filenames,
    # and : so it's safe in mount arguments which accept a colon-separated list
    image_pathsafe="$(echo "$image" | tr '/:' '+')"

    # extract environment variables from the image
    skopeo inspect "$STORAGE_BACKEND$image" | setup/parse_env >"/usr/local/lib/ATO/env/$image_pathsafe"

    # set it up to be mounted
    echo "$image" "$image_pathsafe" >>/usr/local/lib/ATO/to_mount

  done <images.txt

echo Finished extracting images.
echo Clearing up...

cd /
rm -rf /var/cache/ATO

echo Starting up services...
systemctl start nginx.service ATO.service

echo Finished!
